OneDB

OneDB
~ One Database to Rule them All ~

Documentation
v.1.0

Page 1 / 73

OneDB

Table of Contents
1. Introduction.......................................................................................................................................8
2. Backend Guide..................................................................................................................................9
2.1. Starting the application..............................................................................................................9
2.1.1. LogIn..................................................................................................................................9
2.1.2. Starting the application and connecting to database..........................................................9
2.1.3. Application window.........................................................................................................10
2.1.3.1. Titlebar.....................................................................................................................10
2.1.3.2. Menu.........................................................................................................................11
2.1.3.3. Toolbar......................................................................................................................13
2.1.3.4. Tree Panel ................................................................................................................13
2.1.3.5. Items Panel...............................................................................................................14
2.1.3.5.1. Basic Operations you can do in the View Panel...............................................15
2.1.3.5.2. Other operations that you can do in the backend interface..............................15
2.1.3.5.2.1. Drag and drop...........................................................................................15
2.2. Categories................................................................................................................................16
2.2.1. JSON Webservice categories...........................................................................................16
2.2.2. Search categories.............................................................................................................16
2.3. Files and operations you can do with files...............................................................................16
2.3.1. Uploading Files in OneDB...............................................................................................16
2.3.2. Downloading Files from OneDB.....................................................................................16
2.3.3. Main types of files...........................................................................................................16
2.3.4. File Storage Engines........................................................................................................17
2.3.4.1. Migrating files from one storage type to another..........................................................17
2.3.5. GeoBlocking....................................................................................................................17
2.3.5.1. GeoBlocking a file or a list of files..........................................................................17
2.3.5.2. Setting up GeoBlocking...........................................................................................20
2.3.6. Administrative settings in Registry Editor related to Files..............................................20
OneDB.DefaultStorageType.............................................................................................20
OneDB.GeoBlocking.FunctionName...............................................................................20
2.4. Documents and the Document Editor application...................................................................20
2.4.1. Creating a new document.................................................................................................21
2.4.2. The “Document Editor” application................................................................................21
2.4.2.1. Application menu.....................................................................................................22
File....................................................................................................................................22
File / Save.........................................................................................................................22
File / Print.........................................................................................................................22
File / Preview....................................................................................................................22
File / Exit..........................................................................................................................22
Edit...................................................................................................................................22
Edit / Undo.......................................................................................................................22
Edit / Redo........................................................................................................................22
Edit / Search.....................................................................................................................22
Edit / Replace...................................................................................................................22
Edit / HTML Code............................................................................................................22
Edit / Remove Formatting................................................................................................23
Edit / Clean up messy code..............................................................................................23

Page 2 / 73

OneDB
Format...............................................................................................................................23
Format / Font / SubScript.................................................................................................23
Format / Font / SuperScript..............................................................................................23
Format / Font Style / Bold................................................................................................23
Format / Font Style / Italic................................................................................................23
Format / Font Style / Underline........................................................................................23
Format / Font Style / Strike Through................................................................................23
Format / Align / Left.........................................................................................................23
Format / Align / Center.....................................................................................................23
Format / Align / Right.......................................................................................................23
Format / Align / Full.........................................................................................................23
Insert / Remove.................................................................................................................23
Insert Remove / Text / Current Date.................................................................................23
Insert Remove / Text / Current Time................................................................................23
Insert Remove / Text / Created By...................................................................................24
Insert Remove / Text / Creation Date...............................................................................24
Insert Remove / Text / Saved by.......................................................................................24
Insert Remove / Text / Modification Date........................................................................24
Insert Remove / Site Specific Snippet / <snippet name>.................................................24
Insert Remove / Document Template...............................................................................24
Insert Remove / Bulleted List...........................................................................................24
Insert Remove / Numbered List.......................................................................................24
Insert Remove / Special Character...................................................................................24
Insert Remove / Table.......................................................................................................24
Insert Remove / Horizontal Line......................................................................................24
Insert Remove / Block Quote...........................................................................................24
Insert Remove / Hyperlink / Link.....................................................................................25
Insert Remove / Hyperlink / Anchor................................................................................25
Insert Remove / Hyperlink / Remove Link / Anchor.......................................................25
Insert Remove / Picture....................................................................................................25
Insert Remove / Media.....................................................................................................25
Insert Remove / Gallery....................................................................................................25
Insert Remove / Embedded Code.....................................................................................25
2.4.2.2. Application toolbar...................................................................................................25
Bold..................................................................................................................................25
Italic..................................................................................................................................25
Underline..........................................................................................................................26
Strike Through..................................................................................................................26
Justify Left........................................................................................................................26
Justify Center....................................................................................................................26
Justify Right......................................................................................................................26
Justify Full........................................................................................................................26
Paragraph Style.................................................................................................................26
Font Family......................................................................................................................26
Font Size...........................................................................................................................26
Font Color.........................................................................................................................26
Background Color............................................................................................................26

Page 3 / 73

OneDB
Remove Formatting..........................................................................................................26
Deletes Current Focused Block Element..........................................................................26
Insert Bullets.....................................................................................................................26
Numbered List..................................................................................................................26
Deindent Text...................................................................................................................26
Indent Text........................................................................................................................26
Undo.................................................................................................................................26
Redo..................................................................................................................................27
Insert Link........................................................................................................................27
Unlink...............................................................................................................................27
Insert Anchor....................................................................................................................27
Insert Horizontal Line.......................................................................................................27
Insert Picture.....................................................................................................................27
Insert Media......................................................................................................................27
Insert Embedded Code.....................................................................................................27
Preview Article.................................................................................................................27
Preview in Website...........................................................................................................27
2.4.2.3. Keyboard Shortcuts..................................................................................................27
2.4.2.4. The Save Dialog.......................................................................................................28
Name.................................................................................................................................29
Description.......................................................................................................................29
Keywords..........................................................................................................................29
Related Documents...........................................................................................................29
Tags...................................................................................................................................29
Icon...................................................................................................................................29
Posts..................................................................................................................................29
Online...............................................................................................................................29
Owner...............................................................................................................................29
Revision............................................................................................................................29
Creation Date....................................................................................................................29
Last Modified...................................................................................................................29
ID......................................................................................................................................29
ParentCategory ID............................................................................................................30
Save As Template.............................................................................................................30
2.4.2.5. Administrative settings ( in Registry Editor Application ).......................................30
DocumentEditor.EmbedCSS............................................................................................30
DocumentEditor.SnippetsJson..........................................................................................30
DocumentEditor.EnabledGalleries...................................................................................30
DocumentEditor.ContextPreviewDocumentURL............................................................31
2.5. Widgets and views...................................................................................................................31
2.5.1. Creating and running a Widget........................................................................................31
2.5.2. Assigning a widget as a view for a category or an article................................................31
2.6. Json Inspector..........................................................................................................................31
2.7. Forms.......................................................................................................................................32
2.7.1. Setting up a form..............................................................................................................32
2.7.2. Creating a form view and viewing results.......................................................................32
3. Programmer's guide.........................................................................................................................33

Page 4 / 73

OneDB
3.1. General overview.....................................................................................................................33
3.2. Main classes overview.............................................................................................................34
3.3. class OneDB............................................................................................................................37
function __construct ( ...........................................................................................................37
function articles ( ..................................................................................................................38
function categories ( .............................................................................................................39
Magic query fields for methods articles and categories........................................................40
function getElementByPath(.................................................................................................41
function sphinxSearch (.........................................................................................................41
3.4. class OneDB_MongoObject....................................................................................................41
function __construct(.............................................................................................................42
property “_id”........................................................................................................................42
property “_parent”.................................................................................................................42
property “name”....................................................................................................................42
property “type”......................................................................................................................42
property “online”...................................................................................................................42
property “_autoCommit”.......................................................................................................42
property “_collection”...........................................................................................................42
property “icon”......................................................................................................................42
property “keywords”.............................................................................................................43
property “tags”......................................................................................................................43
property “owner”...................................................................................................................43
property “date”......................................................................................................................43
property “modifier”...............................................................................................................43
property “modified”..............................................................................................................43
property “description”...........................................................................................................43
function addTrigger( .............................................................................................................44
function setReadOnly(...........................................................................................................45
function _addGetter( ............................................................................................................45
function save(........................................................................................................................45
function deleteProperty(........................................................................................................46
function deleteDependencies(...............................................................................................46
function delete(......................................................................................................................46
function isChildOf(...............................................................................................................46
function __toString(..............................................................................................................47
function toArray(...................................................................................................................47
function extend(.....................................................................................................................47
function import(.....................................................................................................................48
function addEventListener(...................................................................................................49
function on( ..........................................................................................................................49
function views(......................................................................................................................50
function getServer(................................................................................................................50
3.5. class OneDB_Category............................................................................................................50
class OneDB_Category extends OneDB_MongoObject.......................................................51
function __construct(.............................................................................................................51
property “isVirtual”...............................................................................................................51
function getPath(...................................................................................................................52

Page 5 / 73

OneDB
function getParent(................................................................................................................52
function getChildren(............................................................................................................53
function createCategory(.......................................................................................................54
function createArticle(...........................................................................................................54
function articles(....................................................................................................................55
3.6. class OneDB_Article...............................................................................................................55
class OneDB_Article extends OneDB_MongoObject..........................................................55
function getParent(................................................................................................................55
function getPath(...................................................................................................................56
3.6.1. Class OneDB_Article.Document.....................................................................................56
class OneDB_Article.Document decorates OneDB_Article.................................................56
property “title”.......................................................................................................................56
property “document”.............................................................................................................56
property “textContent”..........................................................................................................56
property “revision”................................................................................................................56
function relatedDocs(............................................................................................................56
function html(........................................................................................................................57
3.6.3. Class OneDB_Article.File...............................................................................................57
class OneDB_Article.File decorates OneDB_Article...........................................................57
property “mime”....................................................................................................................57
property “size”.......................................................................................................................57
function _getStorage(............................................................................................................57
function _getStorageType(....................................................................................................57
function setStorageType(.......................................................................................................58
function storeFile(.................................................................................................................58
function storeURL(...............................................................................................................58
function setContent(..............................................................................................................58
function getFile(....................................................................................................................58
3.6.4. class OneDB_Article.Layout...........................................................................................58
class OneDB_Article.Layout decorates OneDB_Article......................................................58
property “acceptItemTypes”..................................................................................................59
property “maxItems”.............................................................................................................59
function items(.......................................................................................................................59
3.6.5. Class OneDB_Article.Widget..........................................................................................59
class OneDB_Article.Widget decorates OneDB_Article......................................................59
function setEnv(....................................................................................................................59
function run(..........................................................................................................................60
function dependencies(..........................................................................................................60
3.7. class OneDB_ResultsNavigator...............................................................................................60
class OneDB_ResultsNavigator............................................................................................60
function __construct(.............................................................................................................60
property “length”...................................................................................................................61
function flatten(.....................................................................................................................61
function here(........................................................................................................................61
function each(........................................................................................................................61
function filter(.......................................................................................................................61
function sort(.........................................................................................................................62

Page 6 / 73

OneDB
function reverse(....................................................................................................................62
function skip(.........................................................................................................................62
function limit(........................................................................................................................62
function unique(....................................................................................................................62
function get(..........................................................................................................................62
function join(.........................................................................................................................63
function continueIf(...............................................................................................................63
function applySortOrder(......................................................................................................63
3.7.1. Class OneDB_ResultsNavigator.Article..........................................................................63
class OneDB_ResultsNavigator.Article decorates OneDB_ResultsNavigator.....................63
function getParent(................................................................................................................63
3.7.2. Class OneDB_ResultsNavigator.Category......................................................................63
class OneDB_ResultsNavigator.Category decorates OneDB_ResultsNavigator..................63
function articles(....................................................................................................................64
Function getParent(...............................................................................................................64
3.7.3. Class OneDB_ResultsNavigator.Generic........................................................................64
3.8. Other OneDB classes...............................................................................................................65
3.8.1. class OneDB_DatabaseExtender.....................................................................................65
3.8.2. class OneDB_DataParser.................................................................................................65
3.8.3. class OneDB_DummyClass.............................................................................................65
3.8.4. class OneDB_Form..........................................................................................................65
3.8.5. class OneDB_JSONCollection........................................................................................65
3.8.6. class OneDB_ObjectView...............................................................................................65
3.8.7. class OneDB_Registry.....................................................................................................65
3.8.8. class OneDB_RootCategory............................................................................................65
3.8.9. class OneDB_Security.....................................................................................................65
3.8.10. class OneDB_SiteCache................................................................................................65
3.8.11. class OneDB_Storage....................................................................................................65
3.8.12. class OneDB_TextSearch_Server..................................................................................65
3.8.13. class OneDB_Tree.........................................................................................................65
3.8.14. class OneDB_URLFile..................................................................................................65
3.8.15. class OneDB_WidgetCache...........................................................................................65
3.9. Helper functions.......................................................................................................................65
4. Extending OneDB...........................................................................................................................66
4.1. Creating Plugins......................................................................................................................66
4.1.1. %plugin_folder%/plugin.json...............................................................................................66
4.2. Loading Plugins.......................................................................................................................68
4.3. Extending core classes.............................................................................................................68
5. Building, Developing and Debugging Websites in OneDB............................................................69

Page 7 / 73

OneDB

1. Introduction
OneDB is a software that puts together all the logic in order to enable site editors, publishers, and
programmers in order to easily administrate and build websites.
Documentation is split into two sections, one for User Guide, and the other for Programmer Guide.

Page 8 / 73

OneDB

2. Backend Guide
It is very easy to work with OneDB as a user. It's interface is very intuitive, and even if it seems a little
bit complicated on first usage, all options are logically grouped for allowing user to work very
comfortable.

2.1. Starting the application
2.1.1. LogIn

OneDB backend runs smoothly only on webkit-based browsers, so it was designed to work on Google
Chrome ( Safari might work too but not tested) web browser. Other browsers might not function
properly, so please open the link to OneDB backend
What you should do first it would be to Log-In to OneDB backend:
In this box you should input the Username
and Password that your web-admin
administrator provided.
Depending on your company infrastructure,
you might have to choose the authentication
method, from the At: drop down.
After you input your user and password,
click the Login button.

The JSPlatform log-In screen
2.1.2. Starting the application and connecting to database

After you Log-In to JSPlatform screen, you will see on your web-Desktop the OneDB application Icon.
After you double-click it, a dialog prompting you to input the name of the MongoDB database, a username and a password:

Page 9 / 73

OneDB

OneDB web-Desktop icon

OneDB connection dialog

Your administrator will provide you with the values you should enter in the “Host”, “Database
Name”, “UserName” and “Password”. After you complete those fields, you can optionally save those
fields into your server session, by clicking the “Save” button. After you provide a connection name,
your connection will be remembered next time you open your application. All you have to do is to click
the “Load” button, and the fields Host, Database Name, UserName and Password will be populated
automatically with values you previously saved.
2.1.3. Application window

Titlebar
Menu
Toolbar

Tree Panel

Items Panel

2.1.3.1. Titlebar

The titlebar is similar like any regular window titlebar. You can drag the window up / down / left / right
Page 10 / 73

OneDB
with the help of the mouse, you can minimize, maximize, restore or close the window with the help of
the upper-right buttons. Nothing more to be said here.
2.1.3.2. Menu

Here we have the application menu. Items are grouped logically, in order to increase the productivity
and to make the interface more intuitive.
Menu Options
Menu

Submenu

Shortcut Key

What it does

Opens the submenu OneDB. Here you can find applications specific to database filesystem and settings.
Connect to Server

-

Disconnect from currently connected MongoDB Database

Database administration

-

Opens a dialog from where you can see statistics and do
administrative related stuffs in the MongoDB database

Prepare server for first usage

-

Prepares OneDB environment. This option should be used
only by administrators

MongoDB console

-

Opens a console from where you can issue commands and
view results from the MongoDB database.

MongoSphinx

-

Opens the dialog from where administrators can setup a
MongoSphinx server connection, which helps OneDB to do
text searches across documents.

Registry Editor

-

Opens a dialog from where you can modify or alter OneDB
registry settings, which impacts the way this software
behaves.

Plugin Manager

-

Opens the Plugin Manager, an application from where you
can load and unload plugins.

Exit
File

Opens the dialog from where you can connect to a
MongoDB Database

Disconnect from Server

OneDB

-

-

Exits software

Opens the submenu File. Here you can find file operations commands that you can do on articles and
categories.
New … Category Folder

F7

Creates a category which will be a child of the focused
category from the Tree Panel

New … Search Category
Folder

-

Creates a search category which will be a child of the
focused category from the Tree Panel

New … JSON Webservice
Category Folder

-

Creates a JSON webservice category, which will be a child
of the focused category from the Tree Panel

New … Article Document

Ctrl + Alt + N Creates a new Article Document in the current location.

New … Widget Extension

-

Creates a new Widget in the current location

New … Layout Selection

-

Creates a new Layout in the current location

New … <other item >

-

Creates other item type, implemented by a plugin.

Upload File(s) Here

Ctrl + U

Opens a dialog from where you can upload files into
database

Page 11 / 73

OneDB
Open in JSON Inspector
Properties

Alt + Enter

Opens a dialog which display the selected items from the
Items Panel in JSON format.
Opens the properties dialog for selected items from the
Items Panel.

Opens the submenu Edit. Here you can do editing operations with Categories or Articles from the Items
Panel
Search

Ctrl + F

Rename

F2

If a MongoSphinx connection is made by a platform
administrator, it will open the Search Dialog, from where
you can do text-searches in database
Renames current selected item from the Items Panel

Copy

Copies current selected items in the Items Panel. You can
Ctrl + Shift +
paste those items in other location by using the Edit / Paste
C
command.

Cut

Ctrl + Shift +
Cuts current selected items in the Items Panel.
X

Paste

Edit

Ctrl + Shift +
Paste previously copied / cutted items in current location
V

Delete

F8

Deletes current selected items from the Items Panel.

Opens the View submenu. From here you can do tunings on how to display items in OneDB, and other
options that can be grouped in this category.
Icons … Tinny

-

Display the items from the Items Panel as icons of 16x16
pixels

Icons … Large

-

Display the items from the Items Panel as icons of 48x48
pixels

Toolbar
View

F10

Refresh

Ctrl + Enter

Toggles toolbar visibility
Reload items from the Items Panel

Show hidden objects

-

Toggles weather hidden objects will be displayed or not

View Thumbnails

-

Tries to load a thumbnail with a preview image instead of
generic item icon in the Items Panel

Load Maximum … x articles

-

Loads maximum X articles in the Items Panel

Plugins Panel

-

Splits the Items panel so that it make room for a secret
panel, where plugins of the software are placing aditional
interface components.

Opens the Apps submenu. Here you have a list of handful applications that you can use
Form Handlers

-

Opens an application from where programmers can easily
design forms for your website.

User Accounts

-

Opens an application from where programmers can easily
implement user accounts for your website.

Text Editor

-

Opens a text editor with full syntax highlighting.

Apps

Help

Opens the Help menu.

Page 12 / 73

OneDB
2.1.3.3. Toolbar

The toolbar is a region where we placed the most common tasks in the application. By right-clicking
the toolbar anywhere, you can see more options, like for example customize your icon size, or show
labels under the icons.

Toolbar buttons list
Button

Label

What it does

Large Icons

Displays the items from the Items panel as 48x48 icons view

Small Icons

Displays the items from the Items panel as 16x16 icons view

Details

Display the items from the Items panel as a grid (Default View)

Show
Thumbnails

Tries to show thumbnails instead of generic item icons in the Items Panel

Show Icons

Shows generic item icons instead of displaying thumbnails, making the
interface to load faster

Refresh
View as JSON

Refreshes the contents of the current Tree Panel location
Opens JSON Inspector, an application which displays the selected items
properties from the Items Panel

Upload Files Opens an upload files dialog box, alowing the user to upload files from it's
Here
computer or from a list of url's.
2.1.3.4. Tree Panel

The tree panel is useful to show you the hierarchy of all categories from
your database.
Categories that are displayed with multiple icons:
•
- Standard categories
•
- WebService categories
•
- Search categories
Categories that are grayed are offline, and categories that are colored are
online.

The tree panel is drag and drop capable, so you can drag items inside from the Items Panel, or sort
categories inside the Tree Panel with a simple drag and drop operation.
Page 13 / 73

OneDB
By pressing F2 on a focused category from the Tree Panel, you can easily rename that category.
2.1.3.5. Items Panel

Depending on what view settings you made, the items panel can look in 3 modes:
Default view: Detailed

This view is the most flexible one. It supports multiple selections, sorting on custom fields, column
resizing, etc.
The large Icons View

While the detailed items view might show too much information, a user can choose to see the items as
icons. This view is showing only the name of the items. Grayed icons means that the item is offline.

Page 14 / 73

OneDB

The Small Icons View

This view is rendering icons in a more compact mode, showing 16x16 icons.
2.1.3.5.1. Basic Operations you can do in the View Panel

Operation

Effect

Double-click an item

Opens item. If item is a category, it will navigate
into that category.

Hit Enter on an item

Opens item. If item is a category, it will navigate
into that category.

F2 on a focused item

Renames Item

F8 on a selection of items

Deletes selected items

2.1.3.5.2. Other operations that you can do in the backend interface
2.1.3.5.2.1. Drag and drop

You can drag a selection of items from the Items Panel, and drop them into the Tree Panel.

2.2. Categories
In order to create a simple category in OneDB,
use the “File / New / Category Folder” menu. You
can also press the “F7” on your keyboard.
The newly created category will appear on the
Tree Panel, under the current tree selected node:
You should input a category name, taking in consideration the following factors:
– There cannot be two or more categories with the same name (capitalization does matters) in the
Page 15 / 73

OneDB
same parent
– The name of a category ( or an article, etc ) can contain only: letters [a-zA-Z], numbers [0-9],
and: “ “ “ (spaces), “-” ( dashes ), “_” (underscore), and “.” (dots).
After you create a category, you can start storing items inside it, or create other sub-categories in the
same way, in order to arrange your content as you wish.
2.2.1. JSON Webservice categories

A JSON Webservice category is a special category type which allows fetching items from a webservice
(json output needed), and can store other physical categories inside.
For example, you can create a mysql webservice that is serving items from a query via a
“http://company-server/webservice.php” which serves the following JSON output:
[
{
“name”: “Foo”,
“other information”: “Bar”
},
{
“name”: “Boo”,
“other information”: “Moo”
}
]

The above JSON structure (which you can see it contains two items) will be displayed real time by
OneDB as child items of the JSON Webservice category.
To create a JSON Webservice Category, follow the steps below:
1. Ensure you have a working url pointing to a webservice that is serving JSON rows packed into
an array.
2. Click on the “File / New / JSON Webservice Category Folder”. Some similar steps will be
needed just like those from creating a regular category.
3. After you create the category and specify it's name, right click on the category ( from the tree ),
and access it's properties by the context menu that will appear.
4. In the category properties dialog that will appear, a special section will be accessible, called
“JSON WebService Properties (Advanced)”:

Page 16 / 73

OneDB

5. Modify the fields from “JSON WebService Properties (Advanced)” according to the
following instructions:
Field Name

Explanation

Filter

If you want to do additional filtering on OneDB side to the
items that are coming from your webservice, you can
specify them here. As you can see, that should be a valid
JSON object, similar to one from the syntax of MongoDB

Page 17 / 73

OneDB
collection.find( $where ) objects.
For example, if you want to fetch only the fields which
have a price greater than 20 (assuming that your items from
webservice have a numeric field called “price”), you should
specify something like:
{

“price”: {
“$gt”: 20
}

}

Retrieve Max JSON Objects

If you want to limit the number of objects that are retrieved
from your JSON webservice, input here that number. A
value of -1 means that no limit will be applied.

WebService URL

The URL of the webservice

WebService Time To Live (sec) A transparent caching mechanism is implemented, and you
can benefit from that mechanism if you input the number of
seconds to keep webservice results in that cache.
For example, if you input 60, then you will cache the
webservice results for 60 seconds, and no aditional requests
will be made in that time interval. After 60 seconds, when
accessing the category again, another request will be made
to the webservice, doing a refresh first.
If you want to disable caching, set the value to “0” ( might
work slow on big data-sets, but is useful for development ).
WebService Configuration

Webservices are supporting parameters generally, and if
yours does, here is the place to configure those parameters.
You should input here a JSON object, with the following
structure, depending of method you want to pass
parameters to your webservice (GET or POST):
{
“get”: {
“param_1”: “value_1”,
“param_2”: “value_2”
}
}

or
{
“post”: {
“param_1”: “value_1”,
“param_2”: “value_2”
}
}

Page 18 / 73

OneDB

A great feature is that you can have dynamic parameter
values there. A dynamic parameter value is specified in the
following format:
“OneDB( function_that_is_generating_the_dy
namic_value_name )”

For example, if I would want a dynamic parameter to be
passed for my webservice called “date_stop”, I would do
the following:
1. Create a file called “date_stop.inc.php”, located in
“%OneDB%/plugins/core.OneDB_JSONModifier.inc”
folder, with the following content:
<?php
function date_stop() {
return time();
}
?>

2. Specify in WebService Configuration the following:
{

}

“post”: {
“date_stop”: “OneDB( date_stop )”
}

3. Nothing, we're done :)
A note for the dynamic parameter functions:
– use only a-z0-9 and “_” characters
– functions cannot have arguments
WebService UserName
WebService Password

What would be a webservice if it wouldn't be password
protected? You can input a username and a password here if
your webservice supports the HTTP Basic Authentication
protocol.

After you successfully configure your JSON WebService category according to the above instructions,
everything will work fine.
A note for the fields of the items served by a JSON WebService Category:
•

If your items are containing a field called “name”, OneDB will try to use that name in the
interface, but will eliminate the invalid characters from the name of the item.
Page 19 / 73

OneDB
•

If your items are containing a field called “date”, OneDB will treat that field as a Unix
TimeStamp in it's interface while displaying items.

2.2.2. Search categories

2.3. Files and operations you can do with files
2.3.1. Uploading Files in OneDB

You can upload files in OneDB in two ways:
•

From your computer

•

From an URL (list)

To start uploading files in the current Items Panel, all you have to do is to click the File … Upload files
here, or click the

icon from the toolbar, or hit Ctrl + U while the items panel is focused.

A dialog window will open, and depending weather you want to upload files from your computer or to
upload files from an URL list, you can pick the corresponding tab ( From Your Computer or From URL
List) into that dialog.
Tip: You can do drag-and-drop of files from your desktop into the tab “From Your Computer”.
2.3.2. Downloading Files from OneDB

You can simply download a file or a selection of files back to your computer by pressing either the
(download files) button from the toolbar, or by using the menu command: File / Download Selected
Files menu entry.
2.3.3. Main types of files

Although any type of files can be uploaded into OneDB database, some files are treated specially into
the platform:
File Type

Extension

Supports Viewing
Inline

Supports
Other features
Editing Inline

Images

*.jpg, *.jpeg,
*.png, *.gif

Yes

Yes

Video files

*.mp4, *.flv

Yes

Dynamic
resizing

No

Transcoding
Video snapshot

Video files

*.avi, *.mpg,
*.mkv,
other extensions

Maybe, depending on
storage engine
implementation

No

Transcoding
might be
supported,
Video snapshot

Page 20 / 73

OneDB
Text files

*.txt

Yes

Yes

Cascading style sheets *.css

Yes

Yes

Hyper Text Markup
Language Files

*.htm, *.html

Yes

Yes

JavaScript Files

*.js

Yes

Yes

PHP Files

*.php

Yes

Yes

2.3.4. File Storage Engines

OneDB is supporting multiple file storage engines. Depending on your network configuration,
currently it can store files either directly into MongoDB database, via the GridFS storage engine, either
it can store files into a cloud system.
There is also a built-in plugin, called “storage”, which can help you to migrate files from one storage to
another.
Default OneDB file storage engine is into MongoDB gridFS, but this behaviour might be changed later,
depending on what storage engines will be implemented in the future.
2.3.4.1. Migrating files from one storage type to another

By loading the plugin “%plugins%/storage”, you can migrate a file or a selection of files, in
batch mode, from a storage-type to another.
Please consult the section “Plugins” in order to learn how to load a plugin on demand.
2.3.5. GeoBlocking

Definition: GeoBlocking is a feature that is allowing files to be served only to clients from specific
countries. The country from which the file is accessed by, is determined by client's ip address.
2.3.5.1. GeoBlocking a file or a list of files

Select a file or a group of files in the Items Panel:

1

TIP: You can select multiple file by clicking on the numbered edge while holding the Ctrl +
Shift keys.
2

Hit “Ctrl + Enter” or use the program menu: File / Properties

Page 21 / 73

OneDB
A dialog box will be opened:

3

You can see if files are GeoBlocked by inspecting the “GeoBlocking” section in the “View”
Tab.

Page 22 / 73

OneDB
If you want to modify the geoBlocking setting, click the “Modify” tab:

4

In the dropdown: What to do with GeoBlockging, depending on what you want, select an
option that best fit your needs:
5

Input or set the country codes in the “Countries” field:

6

Important: You must input the country code in 2 characters format.
Example of country codes:
uk
United Kingdom (England)
ro
Romania
it
Italy
es
Spain

7

Click on Ok or Apply

Page 23 / 73

OneDB
2.3.5.2. Setting up GeoBlocking

In order to properly setup GeoBlocking, you should meet the following prerequisites:
– Decide what ip2country webservice provider you would use
OneDB has a built-in ip2country provider, which is provided by it's internals. However, if your
assets are accessed frequently and most of them are geo-blocked, you might want to implement
an ip2country webservice in your local network, so that you ensure a minimum latency to your
files.
The ip2country webservice should be implemented as a global function:
function Any_Function_Name ( <string> $ip ) { … }
@return: {

}

<str[2] country code lowercased> if ip is a wan IP
<ascii “-” sign> on error or non-country ip's (e.g. 127.0.0.1)

and loaded into OneDB as a database plugin.
– If you decide to use your own ip2country webservice, you should make that plugin database
loadable, and specify the name of your ip2coutry function into OneDB Registry, under the key
name: “OneDB.GeoBlocking.FunctionName”

2.3.6. Administrative settings in Registry Editor related to Files

In Registry Editor, the following registry keys are related to files:
Registry Key
OneDB.DefaultStorageType

Example
database

In OneDB, files can be distributed across multiple storage types. A default storage type should be
specified in this setting, and that storage type will be used whenever new files are created.
OneDB.GeoBlocking.FunctionName

Our_Geoblocking_PHP_Function

In OneDB, you have the possibility to implement your own IP2Country function, and you can specify
that funciton name in this Registry setting. If setting is missing, a default internal function will be
used.

2.4. Documents and the Document Editor application
A Document in OneDB is an item which contains HTML data that can be embedded in websites. We
can embed the following stuff into documents:
•

rich text

Page 24 / 73

OneDB
•

links

•

videos

•

pictures

•

video / pictures galleries

If we integrated the MongoSphinx search engine server, then our documents will be indexed, and we
will be able to do text searches on our documents.
2.4.1. Creating a new document

We can create a new Document via the File application menu: File / New / Article Document, or we
can create a document from a predefined template which has been setup by a backend administrator via
the File / New / Article Document / <template name>.
Document Editor will be opened after that, opening either a new document or a new document with the
content from our template.
2.4.2. The “Document Editor” application

The above picture illustrates the Document Editor window. Administrators can select custom sitespecific CSS files that will load inside the editor interface, to make the documents look as much
possible the same as they will appear on the website.

Page 25 / 73

OneDB
Interface is divided into three sub-components:
Application menu

All application commands can be found here.

Application toolbar

Most common useful functions are placed directly on the toolbar, in order
to increase usability

The editor itself

This is where you write the document.

2.4.2.1. Application menu

Here is a quick and not exhaustive explanation of commands that you find inside the document editor
menu.
Command

What it does

File

Open the file application menu. Here you find
operations that you can do with the document itself
(from a file point of view)

File / Save
File / Print
File / Preview
File / Exit

Edit

Edit / Undo
Edit / Redo
Edit / Search

Opens the application save dialog
Opens a printing dialog with the document text
Opens a site previewable version of the document ( if
backend administrators have setup things correctly )
Closes the application
Open the Edit application menu. Here you can find
commands which are related to editing and
manipulating the document
Well known undo command
Well known redo command
Does a text-search into the document

Edit / Replace

Does a replacement of an inputed text with another
text inside the document

Edit / HTML Code

Opens up a editor from where you can edit document's
HTML code. This is useful for programmers and web

Page 26 / 73

OneDB
developers in order to insert code by hand in the
document.
Edit / Remove Formatting

Edit / Clean up messy code

Format
Format / Font / SubScript
Format / Font / SuperScript
Format / Font Style / Bold
Format / Font Style / Italic
Format / Font Style / Underline
Format / Font Style / Strike Through
Format / Align / Left

Removes all styles and colors from selected text
Repairs the document. This is useful for example if
you paste HTML code from other source, and want to
ensure that it is spelled and nested correctly.
Opens the format commands menu
Makes selection SubScript
Makes selection SuperScript
Makes selection bold
Makes selection italic
Makes selection underlined.
Makes selection striked through
Aligns the selection to
the left side
Makes selected text to look
centered

Format / Align / Center

Aligns the selected text
to the right side

Format / Align / Right

Format / Align / Full

Insert / Remove

Makes selected text to look more professional, by
aligning it to the both sides of it's container (e.g. page),
this is a very cool feature as you can see right in this
paragraph. Last line, although, will be aligned to left.
Opens the insert or remove menu

Insert Remove / Text / Current Date

Inserts the current date at current cursor position ( e.g.
2012-12-03)

Insert Remove / Text / Current Time

Inserts the current time at current cursor position (e.g.
15:45:23)

Page 27 / 73

OneDB

Insert Remove / Text / Created By

Inserts a special placeholder inside the document at
current cursor position, that will be replaced when
rendered to website with the name of the author of
the document. This feature is good if you want to
create a document template.

Insert Remove / Text / Creation Date

Inserts a special placeholder inside the document at
current cursor position, that will be replaced when
rendered to website with the date when the document
was first created. This feature is good if you want to
create a document template.

Insert Remove / Text / Saved by

Inserts a special placeholder inside the document at
current cursor position, that will be replaced when
rendered to website with the last user name that
saved the document. This feature is good if you want
to create a document template.

Insert Remove / Text / Modification Date

Inserts a special placeholder inside the document at
current cursor position, that will be replaced when
rendered to website with the date the document was
last saved. This feature is good if you want to create a
document template.

Insert Remove / Site Specific Snippet /
<snippet name>

Programmers can create predefined snippets that will
appear here, for allowing the editors to create complex
layouts inside their documents, through a simple click.
A snippet in this context is a piece of html code that is
inserted into document at cursor position.

Insert Remove / Document Template

Insert at cursor position content from other document
template
If you select more lines and you
press that option, you can create
something that looks like this

Insert Remove / Bulleted List

•
•
•

Insert Remove / Numbered List

1. If you select more lines and you
2. press that option, you can create
3. something that looks like this

Insert Remove / Special Character
Insert Remove / Table

Opens a dialog from where you can insert at cursor
position special characters, like: ∞ © µ, etc
( This is an alias of the Table / Insert Table menu )

Insert Remove / Horizontal Line

Inserts a horizontal line
like the above line, at cursor position

Insert Remove / Block Quote

Selected text will be quoted (depending on css that
backend programmers implemented, the text might
look different).
Page 28 / 73

OneDB
By default, quoted text looks indented inside
the editor like this text.
Insert Remove / Hyperlink / Link

Inserts a link at cursor position. By clicking that link,
users can navigate to other sections of the website.

Insert Remove / Hyperlink / Anchor

Inserts an anchor inside the document at cursor
position. Anchors are special links inside the
documents, which are useful if you want to scroll page
automatically to a certain position ( when clicking a <a
href=”#my-section”>My
section</a>
link
for
example).

Insert Remove / Hyperlink / Remove Link /
Anchor
Insert Remove / Picture
Insert Remove / Media

Insert Remove / Gallery

If selected text contains anchors or hyperlinks, those
anchors / hyperlinks will be automatically removed.
Inserts a Picture inside the document (by opening the
insert picture dialog )
Inserts a Video or Iframe code inside the document.
Inserts a gallery inside the document. Galleries are
collection of pictures / videos / documents that are
rendered on the websites inside a box. You should
explore that option by playing with a test document.
Hint: You can drop items from OneDB panel inside
the tab called Items of the Insert / Edit gallery
dialog.

Insert Remove / Embedded Code

Inserts a HTML code at cursor position (opens a dialog
in order to input new code)

2.4.2.2. Application toolbar

On the application toolbar, you can find shortcuts to the most used document editor items:

Toolbar
Button

Command Name

Shortcut to / Item role

Bold

Format / Font Style / Bold

Italic

Format / Font Style / Italic

Page 29 / 73

OneDB

Underline

Format / Font Style / Underline

Strike Through

Format / Font Style / Strikethrough

Justify Left

Format / Align / Left

Justify Center

Format / Align / Center

Justify Right

Format / Align / Right

Justify Full

Format / Align / Full

Paragraph Style

Changes the style of the selected text in order to make it a
heading, etc.

Font Family

Changes the font of the selected text

Font Size

Changes the size of the font from selected text

Font Color

Changes the color of the selected text

Background Color

Changes the background color of the selected text

Remove Formatting

Edit / Remove Formatting

Deletes Current Focused
Block Element

Removes the parent block element where the cursor
resides

Insert Bullets

Insert Remove / Bulleted List

Numbered List

Insert Remove / Numbered List

Deindent Text

Deindents selected text

Indent Text

Indents selected text

Undo

Edit / Undo

Page 30 / 73

OneDB

Redo

Edit / Redo

Insert Link

Insert Remove / Hyperlink / Link

Unlink

Insert Remove / Hyperlink / Remove Link / Anchor

Insert Anchor

Insert Remove / Hyperlink / Anchor

Insert Horizontal Line

Insert Remove / Horizontal Line

Insert Picture

Insert Remove / Picture

Insert Media

Insert Remove / Media

Insert Embedded Code

Insert Remove / Embedded Code

Preview Article

File / Preview

Preview in Website

Previews current article in it's website context. Note that
in order that this setting to work, some registry settings
should be made by your backend administrators.

2.4.2.3. Keyboard Shortcuts

In order to increase usability, when you are focused in the document editor editing zone, some
keyboard shortcuts can make your life easier:
Keyboard Shortcut

Command

Ctrl + B

Bold

Ctrl + I

Italic

Ctrl + U

Underline

Ctrl + J

Justify Full

Ctrl + L

Justify Left

Ctrl + R

Justify Right

Page 31 / 73

OneDB
Ctrl + E

Justify Centered

Ctrl + C

Copy

Ctrl + X

Cut

Ctrl + V

Paste

2.4.2.4. The Save Dialog

Each time you are saving a Document, the following dialog will appear inside the Document Editor
window:

The fields specifications are described in the table below:
Field

Description

Page 32 / 73

OneDB

Name

Description
Keywords
Related Documents

The name of the document in OneDB Filesystem. The name of the document
should be of max 64 characters, and should contain only: Letters, Numbers,
and the following characters: “ “ (spaces), “-” (dashes), “_” (underscores).
Note that Document Editor is trying to auto suggest a legal name, based on
first heading (Heading 1) found in the document.
A description of the document. It is recommended to not exceed 300
characters for this text
Keywords of the document. Type each keywod, and hit enter after each
It is possible to manually relate other similar documents with this one. By
doing this, you can create a “see also” structure on your website.
Tip1: You can drop documents from the OneDB files panel there
Tip2: You can paste copied documents from OneDB files panel there

Tags

Icon

The tags of the document. Depending on how programmers are
implementing their code, they might instruct you to input specific tags on
documents which will have some meaning in their programs. For example, if
you have two versions of your website, and you want that some articles to
not be displayed in the mobile version, your programmers could instruct you
to enter a “no-mobile” tag in the save dialog for those special documents.
If your site layout is displaying preview images for items, you can set-up a
document icon from here. Also, this setting is affecting the main OneDB
window view when generating items thumbnails instead of generic item
icons

Posts

Read-Only field, specifying the number of posts that were posted to that
document. Some features are not yet implemented here, so you should not
take for granted that field.

Online

Weather the item is online or not. Programmers should take in consideration
this field when displaying items on site listings. An offline item should not be
displayed on websites ( recommended ).

Owner
Revision
Creation Date
Last Modified
ID

The name of the user that first created this document
The number of times this document was saved
The date and time this document was first created
The date this document was last saved
Internal Field. The id of this document which MongoDB is using to store it

Page 33 / 73

OneDB

ParentCategory ID

Internal Field. The id of this document category which MongoDB is using to
store it

Save As Template

If you have enough rights on the system, you can create a document template
that other users will use it when they start creating new documents. Check
this box in order to careate a “Document Template”.
Document templates will be a starting point of creating a new document
either via the File / New / Article Document / <Template Name> of the main
OneDB window, either can be used via the “Insert Remove / Document
Template” menu of the Document Editor window.

2.4.2.5. Administrative settings ( in Registry Editor Application )

Backend administrators should take in consideration the following settings in the Registry Editor
application:
Registry Key

Example Value

DocumentEditor.EmbedCSS

http://www.mysite.com/css/article.css

This tells the Document Editor to embed a css file with the styles from the website regarding the
article. In this way, users that are editing articles will have a similar experience with the viewers of the
site.
DocumentEditor.SnippetsJson

http://www.mysite.com/css/snippets.json

This tells the Document Editor to load custom snippets from a JSON file, and place those snippets
inside it's Insert Remove / Site Specific Snippet menu.
An example of such JSON file that inserts two entries in OneDB DocumentEditor menu, would be:
[

{

"name": "RedBox",
"code": "\n\n<div class=\"red-box\">\n\t<div class=\"title\">Box title</div>\n\t<div
class=\"body\">Insert your code here</div>\n</div>\n\n"
},
{
"name": "Buy Button",
"code": "\n\n<button class='buyme'>Buy this product</button>\n\n"
}
]

DocumentEditor.EnabledGalleries

OneDB,OneDB.light,highslide,anythingSlider,anythi
ngSlider.metallic,anythingSlider.metalicmod,anythin
gSlider.minimalist-round,anythingSlider.minimalistsquare

This settings is telling DocumentEditor which galleries to enable in it's documents. Items should be

Page 34 / 73

OneDB
separated with coma “,” character, and be in format : <gallery_name>[.<gallery_style>]
DocumentEditor.ContextPreviewDocumentURL

http://www.mysite.com/preview-article.php

This setting is specifying the Document Editor a link which will receive the article html buffer in
order to activate the “Preview in Website”
function.

2.5. Widgets and views
2.5.1. Creating and running a Widget
2.5.2. Assigning a widget as a view for a category or an article

2.6. Json Inspector
JSON Inspector is a tool which helps developer to see internal document fields in JSON notation. You
can view multiple items at once, or individual items.
On files that does not have an associated internal OneDB opener, the JSON inspector is invocated
automatically when opening the item, otherwise, you can invocate this application by pressing the
“View as JSON”
button on the main application toolbar.
An item would look like this in JSON Inspector:

Note: You can select multiple items at once in the view panel, and invoke the JSON Inspector on
selection.
Page 35 / 73

OneDB

2.7. Forms
2.7.1. Setting up a form
2.7.2. Creating a form view and viewing results

Page 36 / 73

OneDB

3. Programmer's guide

3.1. General overview
By analyzing sites in the past, we reached the conclusion that 99% of those sites can be represented in a
filesystem-way. For example, a Blog site can be represented like this:

{

/ <Blog Root>
{

So, in this structure, we can observe the following:

Author #1
{

Post #1

•

Main post article,
Comment #1 article,
Comment #2 article,
…

•
•

},
{

Post #2
Main post article,
Comment #1 article,

•

Comment #2 article
},
{

Post #3
Main post article,
…,
},

},
{

Author #2
{

Post #1
Main post article
…
}

}
}

•

Items that have the icon
can be called
“Categories”
Items that have the icon
can be called “Articles”
All items have a unique “name” inside their
parent namespace. For example, inside a category
we cannot have two items called “Comment #2
article”.
All items can be accessed through a path structure,
for example when we're referring to the second post
of the Author #1 – which is a category – we can
say: “/Author #1/Post #2/”, and when we're
referring to the comment #2 from that post, we can
address it as: “/Author #1/Post #2/Comment #2
article”
Paths that are pointing to a categories are
terminated all the time with a “/” character
(VERY IMPORTANT!), and paths that are
pointing to articles are never terminated with a “/”
character. This is very important, and we can
quickly figure that “/path/to/foo/” is pointing to a
category called “foo”, which is a child category of
“to”, which is a child category of “path”, and a
“/path/to/bar” is pointing to an article called “bar”,
which is a child of a category called “to”, which is a
child category of “path”, which of course, is a child
of the root category.

Now that we had a little chat about what is a “Category” ( in the shortest terms: a category is
something that can hold items inside, and can be seen as a folder ), and what is an “Article” ( in the
shortest terms: an article is something that holds information, and can be seen as a file ), and what is a
“Path” ( in the shortest terms: a path is a property of each item, weather it's a category or an article,
which makes it's unique and accessible ), we can have an overview of the storage concept of OneDB.
From a programmer's point of view, OneDB is a database filesystem, which can hold various items
called articles with various property in a grouped hierarchy, called categories. Categories can contain

Page 37 / 73

OneDB
sub-categories, and articles, and so on.
An article can be seen as a generic naming of a “File”, “Document”, “Picture”, “Video”, or any other
structure that you can imagine and that can be indivisible.
A category can be seen as a generic naming of a “Collection”, “Folder”, “Group of objects”, etc.
So, if OneDB is a database filesystem ( which at this point might be nothing worthy than a hard disk
partition containing folders and files ), what's the thing that makes it so special?
Well, let me tell you what's that thing. That thing is called “querying”. You can query for categories and
articles in OneDB based on items attributes, obtain a dataset of objects, manipulate them, apply a filter
for example, sor them again, and dump their data ( optionally through a templating system ) into a
browser window, and – voila! That is a website :)
So for being able to successfully use and implement OneDB as a solution for any-website, you should
start viewing any data structure of that any-website as a filesystem. You can be as creative as you want,
of course, and that is the beauty of OneDB, it let you be as flexible as you want.

3.2. Main classes overview
These are the main classes that are founding OneDB.
OneDB
OneDB_MongoObject
OneDB_Article
OneDB_Category
OneDB_ResultsNavigator

Now, transposing those classes name to the small talk (I hope) from the sub-chapter 3.1., here is the
deal:
OneDB is the main class. It instantiates all sub-classes, it implements the filesystem, everything. All
classes are created by OneDB.
When we query through filesystem, we're expecting to obtain objects ( categories and articles ) which
are of types: OneDB_Category , and OneDB_Article . Both OneDB_Article and
OneDB_Category are implementing a more generic object, called OneDB_MongoObject .
We can query OneDB, but we always manipulate articles and categories from the query result-sets with
the OneDB_ResultsNavigator . ResultsNavigator is – as it's name saying – a mechanism we're
using to navigate, sort, filter, limit, reverse, etc. the results we're obtaining after we're querying the
database filesystem. So, here is a new concept: Navigator.
For example, take a look at this chain commands:

Page 38 / 73

OneDB
$myDB->articles(
//we're doing a search in database for items of article type
array(
'online' => true,
'owner' => 'bill',
'keywords' => 'important'
)
)->filter( function( $article ) {
//we're applying a filter to our result-set
return $article->numberOfPosts > 0;
} )->sort( function( $articleA, $articleB ) {
//we're sorting the result-set based on article's names
return strcmp( $articleA->name, $articleB->name );
} )->each( function( $article ) {
//we're dumping some html code to the browser
echo '<tr><td>'
. htmlentities( $article->name ) . '</td><td>'
. htmlentities( $article->owner ) . '</td><td>'
. '<a href=”' . $article->getPath() . '”>view item</a>'
. '</td></tr>';
} );

What is that? The part highlighted with the red color is the OneDB class instance. The yellow color is
the query part. That part is telling OneDB to fetch all articles from database for example, which are in
an online state, have their owner named “bill”, and have a keyword “important” in their keywords list.
The blue part is called the navigation part, where we're doing two things ( we can do those two things
in any order we want, by the way ): 1) we're applying an additional filter on the result set, modifying
the result set to contain only the articles who have posts inside, and 2) we're sorting the results of
articles ascending, on their name. After we have data prepared for our output purpose, comes the green
part, which is taking each article in the order from it's result-set, and do something with it. In the above
code, we're dumping a HTML code representing a table row which has the name and the owner of
articles listed.
Of course, the green part could be something for example like:
->each( function( $article ) {
$article->numberOfViews++;
} );

or,
->each( function( $article ) {
$article->delete();
} );

So, stuff you can do in the red-color and the yellow color part you can do with the:
class OneDB ,
stuff you can do in the blue color part you will do with the:
class OneDB_ResultsNavigator

and the rest of the stuff, you can do with the:
Page 39 / 73

OneDB
class OneDB_Article
class OneDB_Category

Page 40 / 73

OneDB

3.3. class OneDB
This is the main class of OneDB. In fact, this is the only class that the programmer is explicitly
instantiating in it's code.
This

class

is

extended

through

decorating

pattern

classes

located

in

OneDB/plugins/core.OneDB.class/OneDB_plugin_<method_name> .class.php plugins.

For example, a method called “foo” would be dynamically
OneDB_plugins/core.OneDB.class/OneDB_plugin_foo.class.php

loaded

function __construct (
[ <array> $config ]
) @return <void>

Class constructor
$config – an array in the following format:

constructor

array(
'db.host'
'db.database'
'db.user'
'db.pass'
'cache.enabled'
)

=>
=>
=>
=>
=>

'<path_to_mongodb_server>',
'<database_name>',
'<user_name_for_database>',
'<password_for_database>',
<boolean>

Tips: $config parameter is optional. If not present, OneDB will try to fetch it's
configuration in this order, from:
• Global variable $_ONEDB_CFG_
• $_SESSION['onedb_connection']

Page 41 / 73

from:

OneDB

function articles (
<array> $query,
[ <array> $orderBy = NULL, ]
[ <int>
$limit = NULL ]
) @return <OneDB_ResultsNavigator.Article>

Fetches articles from database, according to $query , IF $orderBy it does an internal
MongoDB order, IF $limit it applies a limit to the result-set.
$query : An array with query condition. See MongoCollection::find
$orderBy : An array of fields by which to sort. Each element in the array has as key

Plugin
Method

the field name, and as value either 1 for ascending sort, or -1 for descending sort. Each
result is first sorted on the first field in the array, then (if it exists) on the second field
in the array, etc. This means that the order of the fields in the fields array is important.
See MongoCursor::sort for more information
$limit: Limit to maximum $limit number of results

Example
$my->articles (
array(
'_childOf' => '/foo/bar/',
'online' => true
),
array(
'date' => -1,
'name' => 1
),
3
)[ → … ]
// Note: the _childOf clause is a magic query field, please
// read the section “Magic Query Fields” first

Page 42 / 73

OneDB

function categories (
<array> $query,
[ <array> $orderBy = NULL ]
) @return <new OneDB_ResultsNavigator.Category>

Fetches categories from database, according to $query , IF $orderBy it does an
internal MongoDB order,
$query : An array with query condition. See MongoCollection::find
$orderBy : An array of fields by which to sort. Each element in the array has as key

Plugin
Method

the field name, and as value either 1 for ascending sort, or -1 for descending sort. Each
result is first sorted on the first field in the array, then (if it exists) on the second field
in the array, etc. This means that the order of the fields in the fields array is important.
See MongoCursor::sort for more information
Example:
$onedb->categories(
array(
'_childOf' => '/foo/bar/',
'online' => true
),
array(
'name' => 1,
'date' => -1
)
)[ →… ]
// Note: the _childOf clause is a magic query field, please
// read the section “Magic Query Fields” first

Page 43 / 73

OneDB

Magic query fields for methods articles and categories

Although the parameter $query is used to do a MongoCollection::find() call into
database, some fields from it are treated in a different way by OneDB:
Field

$query['_childOf']
@type <string>

Scope
Method
→categories
($query)
→articles
($query)

Description

Returns all items that are a child of subject
Selector is in format of a CSS rule:
Example:
$onedb->categories(
array(
'selector' => '/path/to/foo/ *'
) )

Magic query
fields

// Returns all items that
// are children to
// category /path/to/foo/
$query['selector'] →categories
@type <string> ($query)

$my->categories(
array(
'selector' => '/path/to/foo/ >
*'
) )
// Returns all items that
// are direct children of
// “/path/to/foo/”
$my->categories(
array(
'selector' => '/path/to/foo/'
) )
// Return category located
// at “/path/to/foo”

Page 44 / 73

OneDB

function getElementByPath(
<string> $elementPath
) @return <OneDB_Class or OneDB_Article>

Plugin
method

Use this function to obtain a single element, by a given path.
Example:
echo $my_db->getElementByPath('/site/widgets/banner-968')->run();
function sphinxSearch (
) @return <new OneDB_TextSearch_Server>

Return a sphinxSearch textSearch instance. For this method to work, you must have
the following checklist solved before:
•
Plugin
Method

On the backend, setup a correct path to a MongoSphinx server in OneDB
Registry:
Entry name: sphinxSearch
Entry value: url to mongoSphinx server.

Example:
$documentIDList = $onedb
->sphinxSearch()
->search( “free text to search into database”, 200 );

would return a list with maximum 200 articles from database, which match free-text
with string “free text to search...”. This method is great for implementing a

3.4. class OneDB_MongoObject
A little chat about the OneDB_MongoObject first. OneDB_MongoObject is the core component
between MongoDB and OneDB . He manages automatic object saving in database, and is adding eventbased functionality to objects. Weather we're speaking about a category or an article, we're speaking
about a OneDB_MongoObject .
When we're setting a property to a OneDB_MongoObject , this proerty is automatically saved on
object destructor into database, unless we're setting the property _autoSave to FALSE , in this case the
programmer need to issue a manual “save() ” to the OneDB_MongoObject .

Page 45 / 73

OneDB
OneDB_MongoObject is a great starting point to extend and add features to all objects from
MongoDB database.

MongoObject supports triggers and events in a similar way with JavaScript eventListeners, and with
MySQL trigger functionality.
function __construct (

Constructor

<MongoCollection> &$collection,
<MongoID|NULL>
$objectID,
<array>
$firstLoadDataIfObjectIDWasSet = NULL
) @return <void>

This is the object constructor. You won't have to implicit call this.
Properties

Property

Description

Type

property
“_id”

The MongoDB _id of this object. If NULL , it means that
MongoId
DEFAULT NULL the object hasn't been saved yet to database.

property
“_parent”

The _id of container category. If NULL , the item is located
MongoId
DEFAULT NULL straight in the root of the tree path.

property
“name”

string

property
“type”

string

property
“online”

bool

The name of the object. This name can contain only: a-z,
A-Z, space, _, -, and '.' sign.
Names should be unique in combination with _parent.
The type of the item.

Weather this item is into an online state or not.
If this is manually set to TRUE , modifications on

property
“_autoCommit”

property
“_collection”

property
“icon”

bool
properties are automatically saved into database at
DEFAULT NULL destruct time. Otherwise, you'll have to invoke a save()

manually for saving the object into it's collection.
Mongo
Collection

current object MongoCollection where $this object
resides into MongoDB database

Returns current object icon assigned from backend. If you
set in backend an icon to this object, you can retrieve that
property
from
here
as
a
string(
e.g.
string
“onedb/129031890289afadb” ). You can place that
DEFAULT NULL
into a <img src=”...” /> tag in your website, or use
the OneDB_picture helper in order to set the size of the
icon when dumping data to browser.

Page 46 / 73

OneDB

property
“keywords”

array
Keywords assigned to this object (if they were set) or
DEFAULT NULL NULL otherwise

property
“tags”

array
Tags that were assigned to this object (if they were set) or
DEFAULT NULL NULL otherwise

property
“owner”

string
The name of the user that created this object
DEFAULT NULL

property
“date”

unix
The date represented as a Unix_Timestamp when this
timestamp
DEFAULT NULL object was first saved into database

property
“modifier”

string
DEFAULT NULL

property
“modified”

unix
The date represented as Unix_Timestamp when this
timestamp
DEFAULT NULL object was last saved into database

property
“description”

string
A short description of this object ( UTF-8 String ) which
DEFAULT NULL was set through the backend interface

The name of the user that last saved this object

Page 47 / 73

OneDB

function addTrigger(
<string>
$propertyName,
<string>
$timing,
<callable(
<mixed>$oldValue,
<mixed>&$newValue,
<mixed>$self)>
$trigger
) @return <void>

Adds a trigger to a property. Triger can be executed “before” or “after” the property is
set. If trigger throws exeption, the property is not modified.
$propertyName – The name of the property who will fire the trigger
$timing – When the trigger to be fired – 'before' or 'after'

Method

$callable – A function that will be called with three parameters:
• $oldValue ,
• $newValue ,
• and an instance of $this object ($self in $callable function body)

Example:
$this->addTrigger(
'propertyName',
'before',
function( $old, &$new, $self ) {
echo “Modifying 'propertyName' “
. “( old = '$old', new = '$new' ) “
. “ of object with _id: $self->_id\n”;
}
);
$this->propertyName = 23; //The trigger is executed.
// If trigger will modify the $new value, $this->propertyName will
// have that value.
// If trigger will throw an exception, propertyName will remain to
// it's actual value before assigning it the value of 23

Page 48 / 73

OneDB

function setReadOnly(
<string> $propertyName
) @return <void>

Method

Marks a property as Read-Only. Any attempts to write that property later, will generate
an Exception
Example:
$this->foo = 23; // Ok
$this->setReadOnly( 'foo' );
$this->foo = 24; // Throws exception
function _addGetter(
<string>
$propertyName,
<callable($self)> $func
) @return <void>

Adds a getter for a custom property. Getters are usefull because their result can be
automatically generated, but their values are not stored into database.
Method

Example:
echo $this->fooBar; // NULL
$this->_addGetter('fooBar', function( $self ) {
return “Object fooBar: $self->_id”;
});
echo $this->fooBar; //Object fooBar: af223addd23ffd12
function save(

Method

) @return <void>

Manually saves the object in it's MongoCollection

Page 49 / 73

OneDB

function deleteProperty (
<string> $propertyName
) @return <void>

Deletes a property from object.
Method

Example:
$this->foo = 45;
echo $this->foo; // 45
$this->deleteProperty( 'foo' );
echo $this->foo; // NULL, because $this->foo became undefined
function deleteDependencies(

Method

) @return <void>

If other objects are stored into MongoDB filesystem, e.g. video-snapshots or other
types, this function deletes them from their collection, as they are not needed anymore
into database. This function is automatically called by the delete() method
function delete(

Method

) @return <void>

Deletes the object from it's MongoDB Collection
function isChildOf(
<MongoId|string> $categoryID
) @return <bool>

If object is a child of a category with MongoDB _id $categoryID , this function will
return TRUE , otherwise will return FALSE
Example:
Method

Assuming that we have a valid path: '/path/to/foo/', ( we have 3 categories if you
observed in this path ):
// TRUE:
$foo->isChildOf( $bar->_id );
//TRUE, because NULL is the ID of the root category:
$foo->isChildOf( NULL );
// FALSE:
$bar->isChildOf( $foo->_id );

Page 50 / 73

OneDB

function __toString(
) @return <string>

Magic
Method

Returns the object as a string, in JSON format.
Example:
echo “$foo”;
// {“_id”: …, …}
function toArray(

Method

) @return <array>

Return the object as an array
function extend(
<array> $object
) @return <void>

Extends properties of $this object.
$object is an array, in format:

Method

array(
'property_name' => <value>,
'property_name' => <value>
…
).

Example:
echo $this->a_custom_property; //NULL
$this->extend( array(
'a_custom_property' => 23,
'another_property' => 'yes'
) );
echo $this->a_custom_property; //23

Page 51 / 73

OneDB

function import(
<string> $requiredClassPath
) @return <void>

Adds the class $object as a decorator class for this object. When calling a method
that doesn't exists in $this namespace, if that method exists in the $object class
instance, it will return call_user_func_array ( array( $object,
$mehodName ), $arguments ) instead.
Example:
// Not working
echo $this->aCustomMethod ( 1, 2 );

Method

// WORKING:
// create a Foo.class.php file:
class Foo {
protected $_self;
public function __construct( &$thatInstance ) {
$this->_self = $thatInstance ;
}
public function aCustomMethod( $a, $b ) {
return $a + $b;
}
}
$this->import( 'Foo' );
echo $this->aCustomMethod ( 1, 2 ); //returns 3

Page 52 / 73

OneDB

function addEventListener (
<string>
$eventName,
<callable($self)> $func
) @return <void>

Class is emitting events based on different actions. Events attached to an action by
calling addEventListener method.
$eventName parameter can be any string, but some events are predefined in
OneDB_MongoObject :
'save'
'delete'

Method

event that is emitted before the object is saved
event that is emitted before the object is deleted

$callable is a closure function which will be called with ($this) as argument.

Example:
$this->addEventListener('save', function( $that ) {
throw
new Exception(“Object with _id $that->_id cannot be saved!”);
});
$this->save(); //throws above exception
$this->addEventListener('my-custom-event', function( $that ) {
echo “My cyustom event listener function!”;
});
$this->on('my-custom-event');
//My custom event listener function attached before
function on(

Method

<string> $eventName
) @return <void>

Triggers an event with name $eventName
Events are added to specific actions with method addEventListener

Page 53 / 73

OneDB

function views(
) @return <class OneDB_ObjectView($self)>

Returns the corresponding views class for current OneDB_MongoObject. For more
information, consult the Views section of documentation.
Method

Example:
echo $foo->views()->{“category.index”}->run();
// Returns the view called 'index' and type category for
// the foo mongoObject, that will run with the default
// $argument = $foo parameter.
function getServer(
) @return <class OneDB>

Method

Returns OneDB class owner of this object.
Example:
$my_onedb = $foo->getServer();

3.5. class OneDB_Category
This is the class that is representing a “category” in OneDB. A category, as we explained into the
introduction, is a “container” or a “collection” which can hold articles or other categories.
Categories are of three types in OneDB:
•
•
•

Category
Category.JSONWebserviceCategory ( decorator ) – Category whose items are obtained through
a JSON webservice from a remote URL
Category.SearchCategory ( decorator ) - Category whose items are obtained through a search.

The dotted notation is coming from the reason that the Category.JSONWebserviceCategory and
Category.SearchCategory
are
in
fact
categories
decorated
with
plugins
called
OneDB_Category_plugin_JSONWebserviceCategory.class.php
and
OneDB_Category_plugin_SearchCategory.class.php,
both
decorators
located
into
plugins/core.OneDB_Category.class folder of OneDB.
When we're using a “.” (dot) inside of a class name notation inside this documentation, we're
referring to the base class ( part from the left side of the dot ) decorated with class from the right
of the dot. Example: Foo.Bar is referring to the class Foo, which is decorated with class Bar.

Page 54 / 73

OneDB

Note: Although we're presenting most common methods and properties, these should be for reference
purpose only, because 99.99% of the time we would manage operations from the backend interface.
TIP: Most common methods of this class that a programmer will use are: getPath() ,
getParent() , getChildren() , and articles() .
Prototype

class OneDB_Category extends OneDB_MongoObject
function __construct(

Constructor

<MongoCollection> $collection,
<MongoID | NULL> $objectID,
<array | NULL>
$firstLoadDataIfObjectIDWasSet
) @return <void>

This is the class constructor. Please note that you, as a programmer won't have to
instantiate categories, as OneDB is instantiating them during the query process.
Name

Type

Description

All properties of OneDB_MongoObject are present to OneDB_Category,
plus these ones:
Weather this is a virtual category or not.

Properties

Boolean
property
DEFAULT
“isVirtual” NULL

A virtual category could for example receive it's items
from a JSON Webservice from your network, or could be
a Search category, whose items would be obtained after a
search operation in other physical categories from our
database.

+ All properties of OneDB_MongoObject

Page 55 / 73

OneDB

function getPath(
<boolean> $escape = TRUE
)

Returns the full category path.
$escape → Weather the parts of the path to be escaped with urlencode function

( convert spaces to “+” characters for example )
Method

Example:
Given the path “/foo object/bar/”, and assuming that $bar is an already instantiated
instantiated OneDB_Category object:
echo $bar->getPath()
// “/foo+object/bar/”
echo $bar->getPath( FALSE )
// “/foo object/bar/”
function getParent(
) @return <OneDB_Category>

Returns the parent category that is containing this category
Example:
Method

Given the path “/foo object/bar/”, and assuming that $bar is an already
instantiated instantiated OneDB_Category object:
$bar = $foo->getParent();
echo $foo->name;
// “foo object”
if ($foo->isChildOf( $bar ) ) echo “TRUE”;
// TRUE

Page 56 / 73

OneDB

function getChildren(
<array> $orderBy = NULL
) @return <array of OneDB_Category>

Return all direct categories of this category.
$orderBy → Weather to do MongoCursor:: sort ( $orderBy ) before

returning the results.
Example:
Assuming that $foo is an instantiated OneDB_Category:
$children = $foo->getChildren();

Method

foreach ($children as $child)
echo $child->name, “\n”;
/* will produce:
bar
zebra
army
*/
$children = $foo->getChildren(
array( 'name' => 1 )
);
foreach ($children as $child)
echo $child->name, “\n”;
/* will produce:
army
bar
zebra
*/

Page 57 / 73

OneDB

function createCategory (
) @return <new OneDB_Category>

Creates a category inside this category and returns it. Note that you'll have to setup
name for that category and do an implicit save after that.
Example:
Method

// - Create a new category called 'foo' inside an existing
// category called 'bar'.
// - Assuming that the 'bar' category is instantiated
// as $bar
try {
$foo = $bar->createCategory ();
$foo->name = “foo”;
$foo->save(); // we're doing an explicit save
} catch (Exception $e) {
echo “Could not create new category: “, $e->getMessage();
}
function createArticle (
<string> $type = NULL
) @return <<OneDB_Category>[.$type]>

Creates an article inside this category. If argument $type is specified, resulting
category will be decorated with OneDB_Category_plugin_$type.class.php
Example:
Method

// Assuming that $foo is an instantiated category
// creating a new article of type Document inside $foo category
try {
$bar = $foo->createArticle( 'Document' );
$bar->name = “New Document”;
$bar->owner = “Matthew”;
$bar->save();
} catch (Exception $e) {
echo “Could not create a new document: “,
$e->getMessage();
}

Page 58 / 73

OneDB

function articles(
<Array> $filter
= array(),
<Array> $orderBy = array().
<int>
$limit
= NULL
) @return <OneDB_ResultsNavigator.Article>

Returns all direct articles for this category.
Method

Example:
// Listing all online articles that are direct
// child of category $foo:
$foo->articles(
array(
'online' => 1
)
)->each( function( $article ) {
echo $article->name, “\n”;
});

3.6. class OneDB_Article
The OneDB_Article class is implementing an article on the OneDB database filesystem. With the help
of the decorator plugins, we then decorate the OneDB_Article class to serve more roles: Files,
Documents, JSON Objects, etc.
Articles, like categories, are have a common ancestor: OneDB_MongoObject, so they don't have too
many built-in methods or properties in the non-decorated version. However, a lot of specific methods
have been added to decorated OneDB_Article, so we will display them here.
Prototype

class OneDB_Article extends OneDB_MongoObject
function getParent(

Method

) @return <OneDB_Category>

Returns the parent OneDB_Category which holds this article

Page 59 / 73

OneDB

function getPath(

Method

<boolean> $escapePath = TRUE
) @return <string>

Returns the path to this article. If $escapePath is set to TRUE, the components of the
path will be url-escaped (meaning that spaces for example will be transformed into
“+” signs)
3.6.1. Class OneDB_Article.Document

This decorator is used to extend the OneDB_Article in order to encapsulate a HTML document that is
edited by the publishers via the backend interface.
Prototype

class OneDB_Article.Document decorates OneDB_Article

Property

Type

property “title”

Properties

UTF-8
String

property “document”

Comment

UTF-8
String

UTF-8
property “textContent ” String
property “revision”

int

+ All properties of OneDB_MongoObject class.
function relatedDocs(

Method

<int> $maxDocs
) @return <OneDB_ResultsNavigator.Article>

Returns a navigator with $maxDocs related articles with this one. Related documents
are set through backend interface by editors, in the Save dialog box of the
DocumentEditor.

Page 60 / 73

OneDB

function html(
) @return <UTF-8 String>

Method

Returns the body of the article, enclosed into a <div class=article> tag, with embedded
article meta properties.
TIP: This is the recommended way of embedding articles into websites, not dumping
directly the “document ” property.

3.6.3. Class OneDB_Article.File

This decorator is used in order to extend the generic OneDB_Article to a File Article. It supports
multiple storage engines through the OneDB_Storage api, storage migration from one engine to
another, video transcoding, etc.
Prototype

class OneDB_Article.File decorates OneDB_Article

Property

Type

Comment

property “mime”

ASCII String

The mime-type of the file

property “size”

Int

The size in bytes of the file

Properties

+ All properties of OneDB_MongoObject class.
function _getStorage(
) @return <new OneDB_Storage($self)>

Method

Return the OneDB_Storage.* api class used for storage for this file.
Additional file operations are implemented in the OneDB_Storage.* class, which are
storage-dependent, like for example moving the file from a storage type to another
storage type.
function _getStorageType (

Method

) @return <string>

Returns the name of the OneDB_Storage.* api used to store this file.

Page 61 / 73

OneDB

function setStorageType(

Method

<string> $storageTypeName = 'database'
) @return <void>

Sets the storage api type which will be used to store the file.
function storeFile(

Method

<string> $filePath
) @return <void>

Stores a file from a disk location, to current storage type.
function storeURL(

Method

<string> $urlPath
) @return <void>

Stores a file from an URL location, to current storage type.
function setContent(

Method

<string> $content = NULL,
<string> $mimeType = NULL
) @return <void>

Sets the content of the file from a string. Additionally, a different mime-type can be
specified for the new file content.
function getFile(
) @return <MongoGridFS_File or compatible class>

Method
Returns a Mongo GridFS File object, or a compatible class that is implementing it's
methods. This is used by file wrappers, so fortunately you won't have to deal with this
method at a general level.
3.6.4. class OneDB_Article.Layout

This decorator is used to extend the OneDB_Article in order to encapsulate a list of OneDB objects
into a single container, while maintaining a special order, specified by the backend editors.
Prototype

class OneDB_Article.Layout decorates OneDB_Article

Page 62 / 73

OneDB
Property

Type

Comment

property
“acceptItemTypes ”

Regular
Expression
String

What kind of items can be stored into this Layout
Object.

property
“maxItems”

Integer

What is the maximum number of items that this
layout object will return when calling method
items()

Properties

All properties of the OneDB_MongoObject class are supported.
function items(

Method

) @return <OneDB_ResultsNavigator.Generic>

This function returns a navigator with the items supplied by the editors via the backend
interface.
3.6.5. Class OneDB_Article.Widget

A widget is a block of code stored into database, which can be executed by OneDB in context of an
object view, or by the programmer by using the method run() explicitly. Widgets are made of four
programming language sections: PHP, HTML, Css, and JavaScript via the backend interface, and are of
3 types:
– Php Widgets
– Xtemplate Widgets
– HTML Widgets
Widgets can also receive arguments, and execute themselves according to input arguments provided by
the programmer or OneDB by itself. The most common argument name that a widget is receiving as
input from the OneDB is called $argument, and is of type either OneDB_Category, either
OneDB_Article.

Prototype
Properties

class OneDB_Article.Widget decorates OneDB_Article

Property

Type

Description

All properties of the OneDB_MongoObject class are supported.
function setEnv(

Method

<array> $env
) @return <$self>

Sets the environment variables of the widget. Returns $this, in order to allow
method chaining like jQuery.

Page 63 / 73

OneDB

function run(
<array> $env = array()
) @return <UTF-8 String>

Method

Executes the widget, and returns it's output.
function dependencies (
) @return <array>

This method is used to retrieve all depedencies of type css or javascript that the
developer mentioned in the backend interface via the advanced tab of the
WidgetEditor application.
@return: array(
'css' => array(
'inline' => '',
'files' => array(
...
)
),
'javascript' => array(
'inline' => '',
'files' => array(
...
)
)
);

Method

3.7. class OneDB_ResultsNavigator
A result navigator is a mechanism we're using in OneDB to manipulate query result-sets. Result
navigators can be decorated via plugins, in order to support commands on specific sets of data of
specific types. For example, a OneDB_ResultsNavigator.Category has some methods that have sense
only on sets of categories, and a OneDB_ResultsNavigator.Article has some methods that have sense
only on sets of articles obtained via queries through OneDB.
Prototype

class OneDB_ResultsNavigator
function __construct(

Constructor

<array> $items,
<OneDB> &$server,
[ <string> $navigatorType = 'generic' ]
)

Constructor for the class. You won't initialize this class by yourself, OneDB will do
that for you.

Page 64 / 73

OneDB
Property
Properties

property “length”

Type
int

Description
Returns the number of items from current
data-set.

function flatten(
) @return <OneDB_ResultsNavigator.{selfType}>

Method

When items from this result navigator are represented as a multi-dimensional tree
structure, this function will convert that structure to a bi-dimensional structure.
@return: A results navigator with a bi-dimensional structure.
function here(
<callable($this)> $func
) @return <$this>

Method

This method is useful to inject some code in the chain of commands, and continue the
chaining.
$callable is a closure function which will be called with $this parameter as 1'st

argument.
function each(

Method

<callable($item[,$index]) > $func
) @return <$this>

Calls the callable function $func($item,$itemIndex) for each element from the
result navigator, and return the same navigator
function filter(

Method

<bool or callable( $item )> $func
) @return <OneDB_ResultsNavigator.{selfType}>

Filters the contents of the data-set, with a user defined function $func which will be
called on each items from the dataset. Function $func will be evaluated as boolean.

Page 65 / 73

OneDB

function sort(
<callable($itemA,$itemB ) > $func
) @return <OneDB_ResultsNavigator.{selfType}>

Method

Returns a results navigator with items sorted by the callable user defined function
$func .
$func – comparision function, which will receive 2 parameters: $itemA , and
$itemB . Function should return a negative integer (-1 or less) if $itemA < $itemB ,
0 if $itemA = $itemB , and positive values (1 or more) if $itemB < $itemA .
function reverse(

Method

) @return <OneDB_ResultsNavigator.{selfType}>

Returns another navigator with items in reverse order
function skip(

Method

<int> $howMany
) @return <OneDB_ResultsNavigator.{selfType}>

Returns another result navigator, omitting the first $howMany items from this one
function limit(

Method

<int> $howMany
) @return <OneDB_ResultsNavigator.{selfType}>

Returns another result navigator with a maximum $howMany from this one
function unique(

Method

<string> $propertyName
) @return <OneDB_ResultsNavigator.{selfType}>

Returns another result navigator, with unique-by-property $propertyName values (
acts similar with a group-by in sql clauses )
function get(

Method

<int> $index
) @return <mixed>

Returns the element located at the $index position from results. Throws exception if
$index is out of range.

Page 66 / 73

OneDB

function join(

Method

<OneDB_ResultsNavigator> $resultSet
) @return <OneDB_ResultsNavigator.Generic>

Returns current items + items from the $resultSet OneDB_ResultsNavigator as a
new navigator of type Generic.
function continueIf(

Method

<boolean or $callable($this)> $boolOrCallable
) @return <OneDB_ResultsNavigator or OneDB_DummyClass>

if parameter $boolOrCallable is evaluated as false, breaks the chain-commands
by returning a OneDB_DummyClass. Otherwise, returns $this , in order to continue
the chain of commands.
function applySortOrder (

Method

<array> $sortOrder
) @return <OneDB_ResultsNavigator.{selfType}>

This method is used by the “%plugins%/sort” plugin, in order to apply an editor
custom sort order on items inside a category.
3.7.1. Class OneDB_ResultsNavigator.Article

This decorator is dedicated on working with sets of articles.

Prototype

class OneDB_ResultsNavigator.Article decorates
OneDB_ResultsNavigator
function getParent(

Method

) @return <OneDB_ResultsNavigator.Category>

Returns a navigator which contains the parents of articles from current navigator
3.7.2. Class OneDB_ResultsNavigator.Category

This decorator is dedicated on working with sets of categories.

Prototype

class OneDB_ResultsNavigator.Category decorates
OneDB_ResultsNavigator

Page 67 / 73

OneDB

function articles(

Method

[ <array> $filters = array(), ]
[ <array> $orderBy = NULL,
]
[ <int>
$limit = NULL
]
) @return <OneDB_ResultsNavigator.Article>

Returns all articles in categories from current data-set, based by an optional
$filter , and doing an MongoCursor::sort() specified in $orderBy . Also, if
$limit parameter is present, the destination OneDB_ResultsNavigator.Article
will contain maximum $limit items.
Function getParent(

Method

[ <array> $orderBy = NULL ]
) @return <OneDB_ResultsNavigator.Category>

Returns a navigator with parent categories from the current data-set, applying a
MongoCursor::sort() on results if the parameter $orderBy is specified.

3.7.3. Class OneDB_ResultsNavigator.Generic

This decorator is a generic one, it has no additional features from the OneDB_ResultsNavigator one.

Page 68 / 73

OneDB

3.8. Other OneDB classes
3.8.1. class OneDB_DatabaseExtender
3.8.2. class OneDB_DataParser
3.8.3. class OneDB_DummyClass
3.8.4. class OneDB_Form
3.8.5. class OneDB_JSONCollection
3.8.6. class OneDB_ObjectView
3.8.7. class OneDB_Registry
3.8.8. class OneDB_RootCategory
3.8.9. class OneDB_Security
3.8.10. class OneDB_SiteCache
3.8.11. class OneDB_Storage
3.8.12. class OneDB_TextSearch_Server
3.8.13. class OneDB_Tree
3.8.14. class OneDB_URLFile
3.8.15. class OneDB_WidgetCache

3.9. Helper functions

Page 69 / 73

OneDB

4. Extending OneDB
OneDB can extended by either:
• Creating an on-the-fly loadable a plugin
• Extending the core classes
On-the-fly loadable plugins are placed usually into a folder, and copied into the OneDB/plugins/ folder.
After that, they are loaded either every time, via the %database%/plugins collection, either on-demand,
via the backend.

4.1. Creating Plugins
A plugin has the following anatomy:
%plugin_folder%/
plugin.json
plugin.php
[ handler.php ]

4.1.1. %plugin_folder%/plugin.json
This file is the plugin configuration file. It is written in JSON format, because it is both loaded by the
backend ( in JavaScript ) and by the frontend ( in PHP ). The file should contain a JSON parseable
object in the following format (without comments ):
{
“plugin”: {
“hasPanel”:

<bool>,

“panelName”:

<string>,

“panelClass”: <string:PanelClassName>,
“main”:

<string:MainPluginBackendClass>

}
}

The plugin.hasPanel is specifying the OneDB Backend that the plugin, when loaded, will have a tab
inside the Plugins Panel zone.
The plugin.panelName will be the name of the panel.
The plugin.panelClass variable is specifying what class name to be loaded on the backend interface for
initializing the panel content in the Plugins Panel zone. The class ( better said function in JavaScript )
prototype should be like this:
window.<myPluginPanelClass> = function( TabPanel ) {

Page 70 / 73

OneDB

}

/* Example of a panel interface 'foo' plugin class
// insert the plugin interface inside the panel...
TabPanel.insert(
document.createElement('p')
).setHTML( 'This is my plugin panel interface' );
// End of example
*/

For being able to write a panel plugin, knowing the JSPlatform javascript api would be a plus.
The window.<myPluginPanelClass> function should be placed inside the plugin folder inside a JS file
(file name doesn't matter, but the file should have a .js extension), for example:
<myPluginPanelClass>.class.js.
The plugin.main variable from the plugin.json file is specifying another name of a JavaScript class,
which will be loaded in the same manner, from a JavaScript file loaded from the root of the
%your_plugin% folder.
Example of such class would be:
/* plugin.json */
{

“plugin”: {
…
“main”: “myPluginMainClass”
…
}

}
/* myPluginMainClass.class.js */
window.myPluginClass = function( oneDB_window ) {
…
// add plugin functionality to your JSPlatform OneDB_Window object
…
}

For a backend plugin demo loadable through the OneDB backend, see the OneDB/%plugins%/foo/
folder. You can load that plugin via the OneDB … Plugin Manager menu option, and when clicking the
“Load Plugin” button, in the field “Input plugin name:” enter: “%plugins%/foo” and click the “Ok”
button.

Page 71 / 73

OneDB

4.2. Loading Plugins
4.3. Extending core classes

Page 72 / 73

OneDB

5. Building, Developing and Debugging Websites in OneDB

Page 73 / 73

